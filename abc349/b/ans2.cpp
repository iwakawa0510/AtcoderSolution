#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
  // 文字列を入力として受け取る
  std::string s;
  std::cin >> s;

  // 各アルファベットの出現回数を数えるための配列を準備 (a-zの26文字分)
  std::vector<int> cnt(26, 0); 
  // 初期値はすべて0で、各アルファベットのカウントを保持します。

  // 入力文字列sを1文字ずつ処理
  for (char c : s) {
    // 'a'からの差分でアルファベットの位置を計算し、出現回数をインクリメント
    // 例：'c'の場合、'c' - 'a' = 2 なので、cnt[2] (3番目の要素)が1増えます。
    cnt[c - 'a']++;
  }

  // 出現回数のカウントを記録するための配列を準備(最大100回まで)
  std::vector<int> cnt2(101, 0);
  // cnt2[i] は出現回数がi回であるアルファベットの数を表します。
  // 例：cnt2[3]が2なら、出現回数が3回のアルファベットが2種類あることを意味します。
  
  // 各アルファベットの出現回数(cnt)を元に、出現回数の種類を数える(cnt2)
  for (int c : cnt) {
    // 出現回数が0より大きい場合のみ処理
    if (c > 0) {
      // 出現回数cに対応するcnt2の要素をインクリメント
      // つまり、出現回数がcのアルファベットが何種類あるかを数えている
      cnt2[c]++;
    }
  }

  // すべての出現回数の種類(cnt2)をチェック
  bool ok = true; 
  // 最初は条件を満たす(Yes)と仮定
  for (int c : cnt2) {
    // 出現回数の種類(c)が0でも2でもない場合、条件を満たさない(No)
    // ここでcが0の場合というのは、その出現回数のアルファベットが存在しないことを示します。
    // cが2の場合というのは、その出現回数のアルファベットが2種類存在することを示します。
    // 0でも2でもないということは、条件から外れるので、Noになる。
    if (c != 0 && c != 2) {
      ok = false; // 条件を満たさないので、falseに変更
      break; // ループを抜ける (これ以上チェックする必要がない)
    }
  }

  // 結果を出力
  std::cout << (ok ? "Yes" : "No") << std::endl; 
  // okがtrueなら"Yes"、falseなら"No"を出力
  return 0;
}
